const path = require('path');
const fs = require('fs');
const CopyPlugin = require('copy-webpack-plugin');
const { execSync } = require('child_process');

function deepMerge(base, override) {
  if (Array.isArray(base) && Array.isArray(override)) {
    return override.slice();
  }
  if (
    base &&
    typeof base === 'object' &&
    !Array.isArray(base) &&
    override &&
    typeof override === 'object' &&
    !Array.isArray(override)
  ) {
    const out = { ...base };
    for (const k of Object.keys(override)) {
      out[k] = deepMerge(base[k], override[k]);
    }
    return out;
  }
  return override !== undefined ? override : base;
}

// 清理构建目录
function cleanDist(platform) {
  const distPath = path.resolve(__dirname, 'dist', platform);
  if (fs.existsSync(distPath)) {
    console.log(`Cleaning ${distPath}...`);
    fs.rmSync(distPath, { recursive: true, force: true });
  }
}

const getConfig = (platform, mode) => {
  // 在构建前清理目录（仅在生产模式下）
  if (mode === 'production') {
    cleanDist(platform);
  }

  return {
    entry: {
      background: './src/background.js',
      content: './src/content.js',
    },
    output: {
      filename: '[name].js',
      path: path.resolve(__dirname, 'dist', platform),
    },
    // Use CSP-safe source maps; never use eval in extension pages
    devtool: mode === 'development' ? 'cheap-module-source-map' : false,
    plugins: [
      new CopyPlugin({
        patterns: [
          // Merge base manifest with platform-specific manifest (override same keys)
          {
            from: 'src/manifest.json',
            to: 'manifest.json',
            transform(content) {
              const base = JSON.parse(content.toString());
              const platPath = path.resolve(__dirname, 'src', `manifest.${platform}.json`);
              const plat = fs.existsSync(platPath)
                ? JSON.parse(fs.readFileSync(platPath, 'utf-8'))
                : {};
              const merged = deepMerge(base, plat);
              return Buffer.from(JSON.stringify(merged, null, 2));
            },
          },
          { from: 'src/icons', to: 'icons' },
          // copy built popup (generated by ui/ build) into dist
          { from: 'src/popup', to: 'popup', noErrorOnMissing: true },
        ],
      }),
    ],
  };
};

module.exports = (env, argv) => {
  const mode = (argv && argv.mode) || process.env.NODE_ENV || 'production';
  const platform = (env && env.platform) || process.env.PLATFORM;
  return platform
    ? getConfig(platform, mode)
    : ['chrome', 'firefox'].map(platform => getConfig(platform, mode));
};
